// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: MarketPlace.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Marketplace_ItemGrpc {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var itemID: String = String()

  var itemName: String = String()

  var itemImageLink: String = String()

  var itemDescription: String = String()

  var itemPrice: Double = 0

  var itemStock: Int32 = 0

  var belongTo: String = String()

  var category: String = String()

  /// for order only
  var itemCount: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Marketplace_GetSimilarItemsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var itemIds: String = String()

  var itemCategory: String = String()

  var withCount: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Marketplace_GetSimilarItemsResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var items: [Marketplace_ItemGrpc] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Marketplace_CheckOutRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var items: [Marketplace_ItemGrpc] = []

  var fromOrg: String = String()

  var currencyID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Marketplace_CheckOutResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var checkoutStatus: Marketplace_CheckOutResult.Status = .success

  var unprocessedItem: [Marketplace_ItemGrpc] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Status: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case success // = 0
    case failPaymentCannotBeVerified // = 1
    case failTransactionTimeOut // = 2
    case failItemOutOfStock // = 3
    case sucessWithFewItemOutOfStock // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .success
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .success
      case 1: self = .failPaymentCannotBeVerified
      case 2: self = .failTransactionTimeOut
      case 3: self = .failItemOutOfStock
      case 4: self = .sucessWithFewItemOutOfStock
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .success: return 0
      case .failPaymentCannotBeVerified: return 1
      case .failTransactionTimeOut: return 2
      case .failItemOutOfStock: return 3
      case .sucessWithFewItemOutOfStock: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Marketplace_CheckOutResult.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Marketplace_CheckOutResult.Status] = [
    .success,
    .failPaymentCannotBeVerified,
    .failTransactionTimeOut,
    .failItemOutOfStock,
    .sucessWithFewItemOutOfStock,
  ]
}

#endif  // swift(>=4.2)

struct Marketplace_AddItemRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var item: Marketplace_ItemGrpc {
    get {return _storage._item ?? Marketplace_ItemGrpc()}
    set {_uniqueStorage()._item = newValue}
  }
  /// Returns true if `item` has been explicitly set.
  var hasItem: Bool {return _storage._item != nil}
  /// Clears the value of `item`. Subsequent reads from it will return its default value.
  mutating func clearItem() {_uniqueStorage()._item = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Marketplace_AddItemResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var itemName: String = String()

  var addStatus: Marketplace_AddItemResult.Status = .success

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Status: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case success // = 0
    case failed // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .success
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .success
      case 1: self = .failed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .success: return 0
      case .failed: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Marketplace_AddItemResult.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Marketplace_AddItemResult.Status] = [
    .success,
    .failed,
  ]
}

#endif  // swift(>=4.2)

struct Marketplace_GetOrgItemsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orgID: String = String()

  var requestType: Marketplace_GetOrgItemsRequest.GetItemsType = .all

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum GetItemsType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case all // = 0
    case limited // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .all
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .all
      case 1: self = .limited
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .all: return 0
      case .limited: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Marketplace_GetOrgItemsRequest.GetItemsType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Marketplace_GetOrgItemsRequest.GetItemsType] = [
    .all,
    .limited,
  ]
}

#endif  // swift(>=4.2)

struct Marketplace_GetOrgItemsResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var items: [Marketplace_ItemGrpc] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "marketplace"

extension Marketplace_ItemGrpc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ItemGrpc"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "itemId"),
    2: .same(proto: "itemName"),
    3: .same(proto: "itemImageLink"),
    4: .same(proto: "itemDescription"),
    5: .same(proto: "itemPrice"),
    6: .same(proto: "itemStock"),
    7: .same(proto: "belongTo"),
    8: .same(proto: "category"),
    9: .same(proto: "itemCount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.itemID)
      case 2: try decoder.decodeSingularStringField(value: &self.itemName)
      case 3: try decoder.decodeSingularStringField(value: &self.itemImageLink)
      case 4: try decoder.decodeSingularStringField(value: &self.itemDescription)
      case 5: try decoder.decodeSingularDoubleField(value: &self.itemPrice)
      case 6: try decoder.decodeSingularInt32Field(value: &self.itemStock)
      case 7: try decoder.decodeSingularStringField(value: &self.belongTo)
      case 8: try decoder.decodeSingularStringField(value: &self.category)
      case 9: try decoder.decodeSingularInt32Field(value: &self.itemCount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.itemID.isEmpty {
      try visitor.visitSingularStringField(value: self.itemID, fieldNumber: 1)
    }
    if !self.itemName.isEmpty {
      try visitor.visitSingularStringField(value: self.itemName, fieldNumber: 2)
    }
    if !self.itemImageLink.isEmpty {
      try visitor.visitSingularStringField(value: self.itemImageLink, fieldNumber: 3)
    }
    if !self.itemDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.itemDescription, fieldNumber: 4)
    }
    if self.itemPrice != 0 {
      try visitor.visitSingularDoubleField(value: self.itemPrice, fieldNumber: 5)
    }
    if self.itemStock != 0 {
      try visitor.visitSingularInt32Field(value: self.itemStock, fieldNumber: 6)
    }
    if !self.belongTo.isEmpty {
      try visitor.visitSingularStringField(value: self.belongTo, fieldNumber: 7)
    }
    if !self.category.isEmpty {
      try visitor.visitSingularStringField(value: self.category, fieldNumber: 8)
    }
    if self.itemCount != 0 {
      try visitor.visitSingularInt32Field(value: self.itemCount, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Marketplace_ItemGrpc, rhs: Marketplace_ItemGrpc) -> Bool {
    if lhs.itemID != rhs.itemID {return false}
    if lhs.itemName != rhs.itemName {return false}
    if lhs.itemImageLink != rhs.itemImageLink {return false}
    if lhs.itemDescription != rhs.itemDescription {return false}
    if lhs.itemPrice != rhs.itemPrice {return false}
    if lhs.itemStock != rhs.itemStock {return false}
    if lhs.belongTo != rhs.belongTo {return false}
    if lhs.category != rhs.category {return false}
    if lhs.itemCount != rhs.itemCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Marketplace_GetSimilarItemsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetSimilarItemsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "itemIds"),
    2: .same(proto: "itemCategory"),
    3: .same(proto: "withCount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.itemIds)
      case 2: try decoder.decodeSingularStringField(value: &self.itemCategory)
      case 3: try decoder.decodeSingularInt32Field(value: &self.withCount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.itemIds.isEmpty {
      try visitor.visitSingularStringField(value: self.itemIds, fieldNumber: 1)
    }
    if !self.itemCategory.isEmpty {
      try visitor.visitSingularStringField(value: self.itemCategory, fieldNumber: 2)
    }
    if self.withCount != 0 {
      try visitor.visitSingularInt32Field(value: self.withCount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Marketplace_GetSimilarItemsRequest, rhs: Marketplace_GetSimilarItemsRequest) -> Bool {
    if lhs.itemIds != rhs.itemIds {return false}
    if lhs.itemCategory != rhs.itemCategory {return false}
    if lhs.withCount != rhs.withCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Marketplace_GetSimilarItemsResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetSimilarItemsResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.items)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Marketplace_GetSimilarItemsResult, rhs: Marketplace_GetSimilarItemsResult) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Marketplace_CheckOutRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CheckOutRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
    2: .same(proto: "fromOrg"),
    3: .same(proto: "currencyId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.items)
      case 2: try decoder.decodeSingularStringField(value: &self.fromOrg)
      case 3: try decoder.decodeSingularStringField(value: &self.currencyID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    if !self.fromOrg.isEmpty {
      try visitor.visitSingularStringField(value: self.fromOrg, fieldNumber: 2)
    }
    if !self.currencyID.isEmpty {
      try visitor.visitSingularStringField(value: self.currencyID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Marketplace_CheckOutRequest, rhs: Marketplace_CheckOutRequest) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.fromOrg != rhs.fromOrg {return false}
    if lhs.currencyID != rhs.currencyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Marketplace_CheckOutResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CheckOutResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "checkoutStatus"),
    2: .same(proto: "unprocessedItem"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.checkoutStatus)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.unprocessedItem)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.checkoutStatus != .success {
      try visitor.visitSingularEnumField(value: self.checkoutStatus, fieldNumber: 1)
    }
    if !self.unprocessedItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unprocessedItem, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Marketplace_CheckOutResult, rhs: Marketplace_CheckOutResult) -> Bool {
    if lhs.checkoutStatus != rhs.checkoutStatus {return false}
    if lhs.unprocessedItem != rhs.unprocessedItem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Marketplace_CheckOutResult.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUCCESS"),
    1: .same(proto: "FAIL_PAYMENT_CANNOT_BE_VERIFIED"),
    2: .same(proto: "FAIL_TRANSACTION_TIME_OUT"),
    3: .same(proto: "FAIL_ITEM_OUT_OF_STOCK"),
    4: .same(proto: "SUCESS_WITH_FEW_ITEM_OUT_OF_STOCK"),
  ]
}

extension Marketplace_AddItemRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddItemRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
  ]

  fileprivate class _StorageClass {
    var _item: Marketplace_ItemGrpc? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _item = source._item
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._item)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._item {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Marketplace_AddItemRequest, rhs: Marketplace_AddItemRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._item != rhs_storage._item {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Marketplace_AddItemResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddItemResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "itemName"),
    2: .same(proto: "addStatus"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.itemName)
      case 2: try decoder.decodeSingularEnumField(value: &self.addStatus)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.itemName.isEmpty {
      try visitor.visitSingularStringField(value: self.itemName, fieldNumber: 1)
    }
    if self.addStatus != .success {
      try visitor.visitSingularEnumField(value: self.addStatus, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Marketplace_AddItemResult, rhs: Marketplace_AddItemResult) -> Bool {
    if lhs.itemName != rhs.itemName {return false}
    if lhs.addStatus != rhs.addStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Marketplace_AddItemResult.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUCCESS"),
    1: .same(proto: "FAILED"),
  ]
}

extension Marketplace_GetOrgItemsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOrgItemsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orgId"),
    2: .same(proto: "requestType"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.orgID)
      case 2: try decoder.decodeSingularEnumField(value: &self.requestType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orgID.isEmpty {
      try visitor.visitSingularStringField(value: self.orgID, fieldNumber: 1)
    }
    if self.requestType != .all {
      try visitor.visitSingularEnumField(value: self.requestType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Marketplace_GetOrgItemsRequest, rhs: Marketplace_GetOrgItemsRequest) -> Bool {
    if lhs.orgID != rhs.orgID {return false}
    if lhs.requestType != rhs.requestType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Marketplace_GetOrgItemsRequest.GetItemsType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALL"),
    1: .same(proto: "LIMITED"),
  ]
}

extension Marketplace_GetOrgItemsResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOrgItemsResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.items)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Marketplace_GetOrgItemsResult, rhs: Marketplace_GetOrgItemsResult) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
