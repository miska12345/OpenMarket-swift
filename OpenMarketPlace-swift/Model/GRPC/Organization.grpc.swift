//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: Organization.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol OrganizationaddOrganizationCall: ClientCallUnary {}

fileprivate final class OrganizationaddOrganizationCallBase: ClientCallUnaryBase<orgMetadata, orgName>, OrganizationaddOrganizationCall {
  override class var method: String { return "/Organization/addOrganization" }
}

internal protocol OrganizationgetOrganizationCall: ClientCallUnary {}

fileprivate final class OrganizationgetOrganizationCallBase: ClientCallUnaryBase<orgName, orgMetadata>, OrganizationgetOrganizationCall {
  override class var method: String { return "/Organization/getOrganization" }
}

internal protocol OrganizationupdateOrganizationCall: ClientCallUnary {}

fileprivate final class OrganizationupdateOrganizationCallBase: ClientCallUnaryBase<orgMetadata, orgName>, OrganizationupdateOrganizationCall {
  override class var method: String { return "/Organization/updateOrganization" }
}


/// Instantiate OrganizationServiceClient, then call methods of this protocol to make API calls.
internal protocol OrganizationService: ServiceClient {
  /// Synchronous. Unary.
  func addOrganization(_ request: orgMetadata, metadata customMetadata: Metadata) throws -> orgName
  /// Asynchronous. Unary.
  @discardableResult
  func addOrganization(_ request: orgMetadata, metadata customMetadata: Metadata, completion: @escaping (orgName?, CallResult) -> Void) throws -> OrganizationaddOrganizationCall

  /// Synchronous. Unary.
  func getOrganization(_ request: orgName, metadata customMetadata: Metadata) throws -> orgMetadata
  /// Asynchronous. Unary.
  @discardableResult
  func getOrganization(_ request: orgName, metadata customMetadata: Metadata, completion: @escaping (orgMetadata?, CallResult) -> Void) throws -> OrganizationgetOrganizationCall

  /// Synchronous. Unary.
  func updateOrganization(_ request: orgMetadata, metadata customMetadata: Metadata) throws -> orgName
  /// Asynchronous. Unary.
  @discardableResult
  func updateOrganization(_ request: orgMetadata, metadata customMetadata: Metadata, completion: @escaping (orgName?, CallResult) -> Void) throws -> OrganizationupdateOrganizationCall

}

internal extension OrganizationService {
  /// Synchronous. Unary.
  func addOrganization(_ request: orgMetadata) throws -> orgName {
    return try self.addOrganization(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func addOrganization(_ request: orgMetadata, completion: @escaping (orgName?, CallResult) -> Void) throws -> OrganizationaddOrganizationCall {
    return try self.addOrganization(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func getOrganization(_ request: orgName) throws -> orgMetadata {
    return try self.getOrganization(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getOrganization(_ request: orgName, completion: @escaping (orgMetadata?, CallResult) -> Void) throws -> OrganizationgetOrganizationCall {
    return try self.getOrganization(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func updateOrganization(_ request: orgMetadata) throws -> orgName {
    return try self.updateOrganization(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func updateOrganization(_ request: orgMetadata, completion: @escaping (orgName?, CallResult) -> Void) throws -> OrganizationupdateOrganizationCall {
    return try self.updateOrganization(request, metadata: self.metadata, completion: completion)
  }

}

internal final class OrganizationServiceClient: ServiceClientBase, OrganizationService {
  /// Synchronous. Unary.
  internal func addOrganization(_ request: orgMetadata, metadata customMetadata: Metadata) throws -> orgName {
    return try OrganizationaddOrganizationCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func addOrganization(_ request: orgMetadata, metadata customMetadata: Metadata, completion: @escaping (orgName?, CallResult) -> Void) throws -> OrganizationaddOrganizationCall {
    return try OrganizationaddOrganizationCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getOrganization(_ request: orgName, metadata customMetadata: Metadata) throws -> orgMetadata {
    return try OrganizationgetOrganizationCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getOrganization(_ request: orgName, metadata customMetadata: Metadata, completion: @escaping (orgMetadata?, CallResult) -> Void) throws -> OrganizationgetOrganizationCall {
    return try OrganizationgetOrganizationCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func updateOrganization(_ request: orgMetadata, metadata customMetadata: Metadata) throws -> orgName {
    return try OrganizationupdateOrganizationCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func updateOrganization(_ request: orgMetadata, metadata customMetadata: Metadata, completion: @escaping (orgName?, CallResult) -> Void) throws -> OrganizationupdateOrganizationCall {
    return try OrganizationupdateOrganizationCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

