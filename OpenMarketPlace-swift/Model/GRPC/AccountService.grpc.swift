//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: AccountService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol AccounthandleLoginCall: ClientCallUnary {}

fileprivate final class AccounthandleLoginCallBase: ClientCallUnaryBase<LoginRequest, LoginResult>, AccounthandleLoginCall {
  override class var method: String { return "/Account/handleLogin" }
}

internal protocol AccounthandleRegisterCall: ClientCallUnary {}

fileprivate final class AccounthandleRegisterCallBase: ClientCallUnaryBase<RegistrationRequest, RegistrationResult>, AccounthandleRegisterCall {
  override class var method: String { return "/Account/handleRegister" }
}


/// Instantiate AccountServiceClient, then call methods of this protocol to make API calls.
internal protocol AccountService: ServiceClient {
  /// Synchronous. Unary.
  func handleLogin(_ request: LoginRequest, metadata customMetadata: Metadata) throws -> LoginResult
  /// Asynchronous. Unary.
  @discardableResult
  func handleLogin(_ request: LoginRequest, metadata customMetadata: Metadata, completion: @escaping (LoginResult?, CallResult) -> Void) throws -> AccounthandleLoginCall

  /// Synchronous. Unary.
  func handleRegister(_ request: RegistrationRequest, metadata customMetadata: Metadata) throws -> RegistrationResult
  /// Asynchronous. Unary.
  @discardableResult
  func handleRegister(_ request: RegistrationRequest, metadata customMetadata: Metadata, completion: @escaping (RegistrationResult?, CallResult) -> Void) throws -> AccounthandleRegisterCall

}

internal extension AccountService {
  /// Synchronous. Unary.
  func handleLogin(_ request: LoginRequest) throws -> LoginResult {
    return try self.handleLogin(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func handleLogin(_ request: LoginRequest, completion: @escaping (LoginResult?, CallResult) -> Void) throws -> AccounthandleLoginCall {
    return try self.handleLogin(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func handleRegister(_ request: RegistrationRequest) throws -> RegistrationResult {
    return try self.handleRegister(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func handleRegister(_ request: RegistrationRequest, completion: @escaping (RegistrationResult?, CallResult) -> Void) throws -> AccounthandleRegisterCall {
    return try self.handleRegister(request, metadata: self.metadata, completion: completion)
  }

}

internal final class AccountServiceClient: ServiceClientBase, AccountService {
  /// Synchronous. Unary.
  internal func handleLogin(_ request: LoginRequest, metadata customMetadata: Metadata) throws -> LoginResult {
    return try AccounthandleLoginCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func handleLogin(_ request: LoginRequest, metadata customMetadata: Metadata, completion: @escaping (LoginResult?, CallResult) -> Void) throws -> AccounthandleLoginCall {
    return try AccounthandleLoginCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func handleRegister(_ request: RegistrationRequest, metadata customMetadata: Metadata) throws -> RegistrationResult {
    return try AccounthandleRegisterCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func handleRegister(_ request: RegistrationRequest, metadata customMetadata: Metadata, completion: @escaping (RegistrationResult?, CallResult) -> Void) throws -> AccounthandleRegisterCall {
    return try AccounthandleRegisterCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

